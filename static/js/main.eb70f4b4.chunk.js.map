{"version":3,"sources":["components/Header/Header.js","components/DrinkNow/DrinkNow.js","components/LoadingSpinner/LoadingSpinner.js","components/SpecialCard/SpecialCard.js","constants/apiConstants.js","components/Specials/Specials.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","useState","navCollapse","setNavCollapse","loggedIn","setLoggedIn","loggedInView","className","nav","src","style","height","padding","alt","right","href","onClick","loggedOutView","color","size","redirectToRegister","outline","accountDisplay","history","push","dark","expand","scrolling","fixed","collapseId","prevVal","id","isOpen","navbar","left","active","to","DrinkNow","type","label","valueDefault","background","gradient","SpinnerPage","role","SpecialCard","urlRestaurant","urlHappyHours","isLoading","setIsLoading","title","setTitle","deal","setDeal","restaurant","setRestaurant","hasHappyHours","setHasHappyHours","happyHourBegin","setHappyHourBegin","happyHourEnd","setHappyHourEnd","getRestaurantData","a","console","log","fetch","res","json","data","name","getHappyHourData","happy_hour_begin","happy_hour_end","formatTime","time","match","slice","sHours","minutes","period","useEffect","special_name","special_pricing","restaurant_id","LoadingSpinner","tag","target","Specials","url","barSpecials","setBarSpecials","fetchData","Home","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb70f4b4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n  MDBBtn\r\n} from \"mdbreact\";\r\n\r\nfunction Header(props) {\r\n  const [navCollapse, setNavCollapse] = useState(() => {\r\n      return \"\"\r\n  })\r\n  const [loggedIn, setLoggedIn] = useState(props.loggedIn)\r\n\r\n  const userImage = \"/images/stock-user.jpg\";\r\n\r\n  const loggedInView = \r\n    <MDBNavItem>\r\n      <MDBDropdown>\r\n        <MDBDropdownToggle className=\"dropdown-toggle\" nav>\r\n          <img\r\n            src={userImage}\r\n            className=\"rounded-circle z-depth-0\"\r\n            style={{ height: \"30px\", padding: 0 }}\r\n            alt=\"Account Access\"\r\n          />\r\n        </MDBDropdownToggle>\r\n        <MDBDropdownMenu className=\"dropdown-default\" right>\r\n          <MDBDropdownItem href=\"#!\">My account</MDBDropdownItem>\r\n          <MDBDropdownItem href=\"#!\" onClick={() => setLoggedIn(false)}>Log out</MDBDropdownItem>\r\n        </MDBDropdownMenu>\r\n      </MDBDropdown>\r\n    </MDBNavItem>\r\n\r\n  const loggedOutView = \r\n    <MDBNavItem>\r\n      <MDBBtn color=\"primary\" size=\"sm\" onClick={() => redirectToRegister()}>Register</MDBBtn>\r\n      <MDBBtn outline color=\"primary\" size=\"sm\" onClick={() => setLoggedIn(true)}>Login</MDBBtn>\r\n    </MDBNavItem>\r\n\r\n  let accountDisplay = loggedIn ? loggedInView : loggedOutView\r\n\r\n  const toggleCollapse = collapseId => {\r\n      setNavCollapse(prevVal => prevVal !== collapseId ? collapseId : \"\")\r\n  }\r\n\r\n  const redirectToHome = () => {\r\n    props.history.push('/');\r\n  }\r\n\r\n  const redirectToRegister = () => {\r\n    props.history.push('/register'); \r\n  }\r\n\r\n  // const redirectToLogin = () => {\r\n  //   props.history.push('/login'); \r\n  // }\r\n  \r\n  return (\r\n    <header>\r\n      <MDBNavbar\r\n        color=\"unique-color-dark\"\r\n        dark\r\n        expand=\"md\"\r\n        scrolling\r\n        fixed=\"top\"\r\n      >\r\n        <MDBNavbarBrand>\r\n          <img style={{\"width\": \"30px\", \"height\": \"30px\"}} src=\"/images/logo.png\" alt=\"logo\" />\r\n        </MDBNavbarBrand>\r\n        <MDBNavbarToggler onClick={() => toggleCollapse(\"navbarCollapse\")} />\r\n        <MDBCollapse id=\"navbarCollapse\" isOpen={navCollapse} navbar>\r\n          <MDBNavbarNav left>\r\n            <MDBNavItem onClick={() => redirectToHome()} active>\r\n              <MDBNavLink to=\"#!\">Home</MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink to=\"#!\">Map</MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink to=\"#!\">Bars</MDBNavLink>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n          <MDBNavbarNav right>\r\n            {accountDisplay}\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n    </header>\r\n  );\r\n}\r\nexport default withRouter(Header);\r\n","import React from 'react';\r\nimport { MDBBtn, MDBAnimation, MDBContainer, MDBInput } from \"mdbreact\";\r\nimport './DrinkNow.css'\r\n\r\nfunction DrinkNow(props) {\r\n    // make options the cities that we have loaded\r\n    const options = [\r\n        { value: 'NewYork', label: 'New York' },\r\n        { value: 'LosAngeles', label: 'Los Angeles' },\r\n        { value: 'Austin', label: 'Austin' }\r\n      ]\r\n\r\n    return(\r\n        <MDBContainer>\r\n            <MDBAnimation type=\"flipInX\">\r\n                <MDBInput label=\"City\" valueDefault={options[0].label} background />\r\n                <MDBBtn className=\"form-item\" size=\"lg\" gradient=\"blue\">Drink Now!</MDBBtn>\r\n            </MDBAnimation>\r\n        </MDBContainer>\r\n    )\r\n}\r\n\r\nexport default DrinkNow;","import React from \"react\";\r\n\r\nconst SpinnerPage = (props) => {\r\n\r\n  const color = props.color\r\n\r\n  return (\r\n    <>\r\n      <div className={`spinner-border ${color}`} role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SpinnerPage;","import React, { useState, useEffect } from 'react';\r\nimport { MDBCard, MDBCardTitle, MDBCardText, MDBCardBody } from \"mdbreact\";\r\nimport LoadingSpinner from '../LoadingSpinner/LoadingSpinner';\r\nimport {SPECIALS_HAPPYHOURS_API, BAR_API} from '../../constants/apiConstants';\r\n\r\nfunction SpecialCard(props) {\r\n    const urlRestaurant = `${BAR_API}` // change to chrisurl/businesses/\r\n    const urlHappyHours = `${SPECIALS_HAPPYHOURS_API}restaurants/happy_hours/`\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [title, setTitle] = useState()\r\n    const [deal, setDeal] = useState()\r\n    const [restaurant, setRestaurant] = useState()\r\n    const [hasHappyHours, setHasHappyHours] = useState(false)\r\n    const [happyHourBegin, setHappyHourBegin] = useState()\r\n    const [happyHourEnd, setHappyHourEnd] = useState()\r\n\r\n    const getRestaurantData = async (id) => {\r\n        console.log(urlRestaurant)\r\n        setIsLoading(true)\r\n        const res = await fetch(urlRestaurant + id)\r\n        const data = await res.json()\r\n        setRestaurant(data.name)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    const getHappyHourData = async (id) => {\r\n        const res = await fetch(urlHappyHours + id)\r\n        const data = await res.json()\r\n        if (data.happy_hour_begin && data.happy_hour_end) {\r\n           setHappyHourBegin(formatTime(data.happy_hour_begin))\r\n           setHappyHourEnd(formatTime(data.happy_hour_end))\r\n           setHasHappyHours(true)\r\n        }\r\n    }\r\n\r\n    // format from DB -> HH:MM:SS\r\n    // given output from function -> H:MM AM/PM\r\n    const formatTime = (time) => {\r\n        const [sHours, minutes] = time.match(/([0-9]{1,2}):([0-9]{2})/).slice(1);\r\n        const period = +sHours < 12 ? 'AM' : 'PM';\r\n        const hours = +sHours % 12 || 12;\r\n        return `${hours}:${minutes} ${period}`;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTitle(props.deal.special_name)\r\n        setDeal(props.deal.special_pricing)\r\n        // getHappyHourData needs to come before getRestaurantData so that the loading icon \r\n        // will be properly displayed while waiting for backend\r\n        getHappyHourData(props.deal.restaurant_id)\r\n        getRestaurantData(props.deal.restaurant_id)\r\n    }, [props.deal.special_name, props.deal.special_pricing, props.deal.restaurant_id])\r\n\r\n\r\n    return(\r\n        <MDBCard>\r\n        {isLoading ? (<div><LoadingSpinner color=\"text-primary\" /></div>) : \r\n            <MDBCardBody>\r\n                <MDBCardTitle tag=\"h5\">\r\n                    <a href=\"#!\" target=\"_blank\">{restaurant}</a>\r\n                    <p id=\"bigger\" className=\"card-text\">\r\n                        Happy Hours:\r\n                        {hasHappyHours ? \r\n                            (` ${happyHourBegin} - ${happyHourEnd}`): \r\n                            \" No Happy Hours\"}\r\n                    </p>\r\n                </MDBCardTitle>\r\n                    <hr />\r\n                    <p className=\"special-title\">{title}</p>\r\n                <MDBCardText>{deal}</MDBCardText>\r\n            </MDBCardBody>\r\n        }\r\n        </MDBCard>\r\n    )\r\n}\r\n\r\nexport default SpecialCard;","export const BACKEND_PORT = \"192.168.99.100\"\r\n\r\nexport const SPECIALS_HAPPYHOURS_API = \"https://opening-page-server.herokuapp.com/\"\r\n\r\nexport const BAR_API = \"https://business-data2020.herokuapp.com/businesses/\"\r\n","import React, { useState, useEffect, } from 'react';\r\nimport { MDBRow, MDBCol, MDBContainer } from \"mdbreact\";\r\nimport SpecialCard from '../SpecialCard/SpecialCard';\r\nimport LoadingSpinner from '../LoadingSpinner/LoadingSpinner';\r\nimport './Specials.css';\r\nimport {SPECIALS_HAPPYHOURS_API} from '../../constants/apiConstants';\r\n\r\nfunction Specials() {\r\n    const url = `${SPECIALS_HAPPYHOURS_API}bar_specials/`\r\n    const [barSpecials, setBarSpecials] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const res = await fetch(url)\r\n            const data = await res.json()\r\n            setBarSpecials(data)\r\n            setIsLoading(false)\r\n        }\r\n        fetchData()\r\n    }, [url])\r\n    \r\n  \r\n\r\n    return( \r\n        <MDBContainer>\r\n            <h2 className=\"special-header\">Best Happy Hour Deals</h2>\r\n            {isLoading ? (<LoadingSpinner color=\"text-white\" />): \r\n                (<MDBRow >\r\n                    <MDBCol size=\"md\">\r\n                        <SpecialCard deal={barSpecials[0]} />\r\n                    </MDBCol>\r\n\r\n                    <MDBCol size=\"md\">\r\n                        <SpecialCard deal={barSpecials[1]} />\r\n                    </MDBCol>\r\n\r\n                    <MDBCol size=\"md\">\r\n                        <SpecialCard deal={barSpecials[2]} />\r\n                    </MDBCol>\r\n\r\n                </MDBRow>)\r\n            }\r\n        </MDBContainer>\r\n    )\r\n}\r\n\r\nexport default Specials;","import React from 'react';\r\nimport DrinkNow from '../DrinkNow/DrinkNow'\r\nimport Specials from '../Specials/Specials'\r\nimport './home.css';\r\n\r\n\r\nfunction Home() {\r\n    return(\r\n        <div>\r\n            <div className=\"drink-now\">\r\n                <img src=\"/images/logo.png\" alt=\"logo\" />\r\n                <DrinkNow />\r\n            </div>\r\n            <div className=\"specials\">\r\n                <Specials />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\n\r\nimport Home from './components/Home/Home';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n \r\nfunction App() {\r\n  \r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <Header loggedIn={false}/>\r\n        <div>\r\n          <Switch>\r\n            <Route path=\"/\" exact={true}>\r\n              <Home/>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\nimport LoginForm from './components/LoginForm/LoginForm';\r\nimport RegistrationForm from './components/RegistrationForm/RegistrationForm'; \r\nimport AlertComponent from './components/AlertComponent/AlertComponent'; \r\nconst [errorMessage, updateErrorMessage] = useState(null);\r\n<Route path=\"/register\">\r\n              <RegistrationForm showError={updateErrorMessage} />\r\n            </Route>\r\n            <Route path=\"/login\">\r\n              <LoginForm showError={updateErrorMessage} />\r\n            </Route>\r\n          </Switch>\r\n          <AlertComponent errorMessage={errorMessage} hideError={updateErrorMessage}/> */","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'; import\r\n'bootstrap-css-only/css/bootstrap.min.css'; import\r\n'mdbreact/dist/css/mdb.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}